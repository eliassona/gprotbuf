<letter> 	     = #'[A-Za-z]'
decimalDigit = #'[0-9]'
octalDigit   = #'[0-7]'
hexDigit     = #'[0-9a-fA-F]'

ident = letter { letter | decimalDigit | "_" }
fullIdent = ident { "." ident }
messageName = ident
enumName = ident
fieldName = ident
oneofName = ident
mapName = ident
serviceName = ident
rpcName = ident
messageType = [ "." ] { ident "." } messageName
enumType = [ "." ] { ident "." } enumName

intLit     = decimalLit | octalLit | hexLit
decimalLit = #'[1-9]' { decimalDigit }
octalLit   = "0" { octalDigit }
hexLit     = "0" ( "x" | "X" ) hexDigit { hexDigit } 


floatLit = ( decimals "." [ decimals ] [ exponent ] | decimals exponent | "."decimals [ exponent ] ) | "inf" | "nan"
decimals  = decimalDigit { decimalDigit }
exponent  = ( "e" | "E" ) [ "+" | "-" ] decimals 

boolLit = "true" | "false" 


strLit = ( <"\'"> { charValue } <"\'"> ) |  ( <'\"'> { charValue } <'\"'> ) 
charValue = hexEscape | octEscape | charEscape  | #"[^\\0\n]"
hexEscape = <'\\'> ( "x" | "X" ) hexDigit hexDigit   
octEscape = <'\\'> octalDigit octalDigit octalDigit
charEscape = <'\\'> ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | '\\' | "\'" | '\"' ) 
quote = "\'" | '\"'

emptyStatement = ";"

constant = fullIdent | ( [ "-" | "+" ] intLit ) | ( [ "-" | "+" ] floatLit ) | strLit | boolLit

syntax = <"syntax"> optional-space <"="> optional-space quote "proto3" quote optional-space <";">

import = "import" space [ ("weak" | "public") space ] strLit optional-space <";"> 

package = "package" space fullIdent optional-space ";"


option = "option" space optionName optional-space "=" optional-space constant optional-space ";"
optionName = ( ident | "(" fullIdent ")" ) { "." ident }


type = "double" | "float" | "int32" | "int64" | "uint32" | "uint64"
      | "sint32" | "sint64" | "fixed32" | "fixed64" | "sfixed32" | "sfixed64"
      | "bool" | "string" | "bytes" | messageType | enumType
fieldNumber = intLit;

field = [ "repeated" space ] type space fieldName optional-space <"="> optional-space fieldNumber optional-space [ <"["> fieldOptions <"]"> ] ";"
fieldOptions = fieldOption { ","  fieldOption }
fieldOption = optionName "=" constant


oneof = "oneof" space oneofName optional-space <"{"> { optional-space (oneofField | emptyStatement) optional-space } optional-space <"}">
oneofField = type space fieldName optional-space <"="> optional-space fieldNumber [ <"["> fieldOptions <"]"> ] <";">

mapField = <"map"> <"<"> optional-space keyType optional-space "," optional-space type optional-space <">"> space mapName optional-space <"="> optional-space fieldNumber [ "[" fieldOptions "]" ] ";"
keyType = "int32" | "int64" | "uint32" | "uint64" | "sint32" | "sint64" |
          "fixed32" | "fixed64" | "sfixed32" | "sfixed64" | "bool" | "string"
          
reserved = <"reserved"> space ( ranges | fieldNames ) optional-space <";">
ranges = range optional-space {optional-space <","> optional-space  range}
range =  intLit [ space "to" space ( intLit | "max" ) ]
fieldNames = fieldName optional-space { <","> optional-space fieldName optional-space }     


enum = <"enum"> space enumName optional-space enumBody
enumBody = <"{"> optional-space { (option | enumField | emptyStatement) optional-space } <"}">
enumField = ident optional-space <"="> optional-space intLit optional-space [ <"["> optional-space enumValueOption optional-space { <",">  optional-space enumValueOption optional-space } <"]"> ] optional-space <";">
enumValueOption = optionName optional-space <"="> optional-space constant 

message = <"message"> space messageName optional-space messageBody
messageBody = <"{"> optional-space { (field | enum | message | option | oneof | mapField | reserved | emptyStatement) optional-space } optional-space <"}">

service = "service" space serviceName space "{" space { option | rpc | emptyStatement space } optional-space "}"
rpc = "rpc" space rpcName space "(" [ "stream" ] messageType ")" space "returns" space "(" [ "stream" ]
messageType ")" (( "{" {option | emptyStatement } "}" ) | ";")


proto = optional-space syntax optional-space { (import | package | option | topLevelDef | emptyStatement) optional-space }
topLevelDef = message | enum | service


single-line-comment = '//' #'.'* new-line

new-line = '\n' | Epsilon
<space> = <#'[ \t\n,]+'>
<optional-space> = <#'[ \t\n]*'>

    